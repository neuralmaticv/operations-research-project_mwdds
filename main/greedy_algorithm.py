from utils.helper import get_successors, remove_vertices

"""
Inicijalizujemo prazan skup za dominirajuce cvorove
Sortiramo sve cvorove u opadajucem poretku na osnovu tezine
Prolazimo kroz sve cvorove:
    Ako je svaki cvor, koji je dostizan iz i, dostizan iz cvora koji je u dominirajucem skupu, preskoci taj cvor.
    U suprotnom, dodaj cvor i u dominirajuci skup
Vrati informacije o dominirajucem skupu i tezini cvorova
"""

def greedy_solver(vertices, edges):
    """Greedy algorithm for finding a dominating set in a graph.

    Args:
        vertices: A dictionary of vertices and their weights.
        edges: A dictionary of edges and their weights.

    Returns:
        A tuple containing a dominating set and its weight.

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """
    domination_set = []
    nodes = sorted(vertices, key=lambda x: vertices[x] * (1- (len(get_successors(x, vertices, edges)) * 0.001)))

    remaining_vertices = set(nodes)

    while remaining_vertices:
        min_weight = float('inf')
        min_vertex = None

        for v in remaining_vertices:
            if vertices[v] < min_weight:
                min_weight = vertices[v]
                min_vertex = v

        domination_set.append(min_vertex)

        remaining_vertices = remove_vertices(min_vertex, remaining_vertices, get_successors(min_vertex, remaining_vertices, edges))

    weight = sum(value for key, value in vertices.items() if key in domination_set)
    return domination_set, weight
